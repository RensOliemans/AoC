#+title: Advent of Code
#+author: Rens Oliemans
#+date: 2023-12-11

Ik ben op [2023-12-11 ma] gestart, en ga niet de eerdere challenges doen: ik begin gewoon met die van vandaag, oftewel Dag 11.

* Day 1
:PROPERTIES:
:header-args: :var inputfile="inputs/day1.txt" :results output
:END:

** Part One
Quite simple: take first and last number from each line and concatenate them. In the case of a single number, add that one twice. Sum the result of each line.

#+begin_src python
  with open(inputfile) as f:
      lines = [[char for char in line
               if char.isdigit()]
               for line in f]

  print(sum([int(line[0] + line[-1]) for line in lines]))
#+end_src

#+RESULTS:
: 54630

** Part Two
#+begin_quote
Update: I misunderstood the question. I thought that =eightwothree= should be converted to =83=, since the =t= was already 'taken' by the =eight=. However, that is not the case, and it should converted to =823=. In this case it does not matter, since the extra number isn't at the start or end of the string, but in the input that does happen occasionally. I actually created /two/ versions that did the same thing (second is markedly less efficient, but smaller code). The second one is now correct, but I am keeping the first one here for fun.
#+end_quote

A tiny bit more complex: some of the numbers that you need to sum aren't in the string as digits, but are written out. For example, =two1nine= would need to parse to =29=. The difficulty is shown in the example of =eightwothree=, which would parse to =83=, since the first =t= is part of =eight=.

I opted for a regex solution ([[https://docs.python.org/3/library/re.html#re.sub][re.sub]]), since it's easy to substitute in the order the string comes. Note the non-greedy matchers in the pattern, otherwise we wouldn't match a single number. 

#+name: d1p2
#+begin_src python :noweb yes :tangle tangle/d1p2.py :var inputfile="inputs/day1-ex.txt"
  import re

  numstrings = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']
  NUMBERS = {num: numstrings.index(num) + 1
             for num in numstrings}

  pattern = <<regex_pattern>>  

  def parse_line(line):
      <<convert_strings_to_numbers>>
      line = re.sub(r'[a-z]', '', line)
      return int(line[0] + line[-1])


  def replace_group(matchobj):
      <<replace_group>>


  with open(inputfile) as f:
      lines = [line.strip() for line in f]
      orig_lines = lines


  lines = [parse_line(line) for line in lines]
  print(sum(lines))

  <<other_approach>>
#+end_src

#+RESULTS: d1p2
: 281
: 281

The regex pattern here is quite complicated, since the strings can be a bit complicated. My goal is to convert each number-word in the to the corresponding number. Then, we can remove the remaining letters, and we can finally take the first and last character.

These are some examples of the strings and their desired conversion:
- =eightwothree= :: =83=
- =4nineeightseven2= :: =49872=
- =zoneight234= :: =1234=

We have the following difficulties:
- It might start with some amount of letters that don't belong to a number
- After the possible initial letters, we have at least one number /or/ a word of number,
  followed by possible random letters. This /might/ be repeated. At the end, we might
  again have random letters.

In order to catch the first letters /without/ matching too much, we use the non-greedy modifier =?=. Otherwise, the first letters are always matched to throw away. We match the actual numbers in a capturing group.

#+name: regex_pattern
#+begin_src python
  fr'[a-z]*?(([1-9]|{"|".join(numstrings)})[a-z]*?)[a-z]*?'
#+end_src

We convert strings to numbers with =re.sub=, which can be called with a function. In that case, that function is called with the matchobject and returns the replacement string (see [[https://docs.python.org/3/library/re.html#re.sub][re.sub()]]).

#+name: convert_strings_to_numbers
#+name: 
#+begin_src python
  line = re.sub(pattern, replace_group, line)
#+end_src

Remember, the capturing group can contain either the digit itself, or a word of the digit.
#+name: replace_group
#+begin_src python
  word = matchobj.group(1)
  if word.isdigit():
      return str(word)
  return str(NUMBERS[word])
#+end_src

#+CALL: d1p2(inputfile="inputs/day1.txt")

#+RESULTS:
: 54780
: 54770

Other approach to verify the result

#+name: other_approach
#+begin_src python
  def generate_converted_line(line):
      i = 0
      while i < len(line):
          char = line[i]
          if char.isdigit():
              yield char
              i += 1
              continue

          for num in numstrings:
              try:
                  if line[i:i+len(num)] == num:
                      yield str(NUMBERS[num])
                      i += 1
                      break
              except IndexError:
                  continue

          i += 1

  converted = [generate_converted_line(line) for line in orig_lines]
  values = list()
  for conv in converted:
      conv = list(conv)
      values.append(int(conv[0] + conv[-1]))

  print(sum(values))
#+end_src

#+RESULTS: other_approach

* Day 10
** Part One
*** Problem
Input:

#+begin_example
7-F7-
.FJ|7
SJLL7
|F--J
LJ.LJ
#+end_example

We are looking at a grid of pipes. Each element is a pipe of some sorts, or no pipe at all (=.=). The pipes are:
- =-= :: horizontal (N to S)
- =|= :: vertical (E to W)
- =J= :: bend from N to W
- =L= :: bend from N to E
- =7= :: bend from S to W
- =F= :: bend from S to E
- =S= :: start location

The pipes always form a continuous loop, and there might be disconnected pipes in the rest of the grid. The goal is to find out the distance from the start location =S= to the farthest point in the loop, measured by steps taken in the loop. In summary: find the length of the loop.

*** Solution
The idea is to start at =S=, traverse the path until we get to =S=, and take the length of the path, divided by two.

#+name: day_10_part_one
#+begin_src python :noweb yes :tangle tangle/d10p1.py :var inputfile="inputs/day10-ex.txt" :results output
  with open(inputfile) as f:
      grid = f.read().strip().split('\n')


  def find_start_location(grid):
      <<find_start_location>>


  def traverse_path(grid, initial_cell):
      """Returns the length of the path traversed by starting from cell in grid."""
      <<traverse_path>>

  S = find_start_location(grid)
  path = traverse_path(grid, S)
  print(len(path) // 2)
#+end_src

#+RESULTS: day_10_part_one
: 8

Finding the start location is easy:
#+name: find_start_location
#+begin_src python :results none
  for y, row in enumerate(grid):
      for x, char in enumerate(row):
          if char == 'S':
              return (y, x)
#+end_src

We traverse a path starting at =a= by looking at both of the adjacent cells of =a=: =b= and =c=. We choose one of them to traverse, say =b=. We now look at the two adjacent cells to =b=, which are =a= and =d=. Our /previously/ traversed cell was =a=, so we instead look at =d=, and set =previous_cell= to =b=, so that we keep traversing new cells. Whenever we end up back at =a=, we have finished our loop.

#+name: traverse_path
#+begin_src python :noweb yes :results none
  import random

  def find_adjacent_cells(grid, cell):
      """Determines what two cells are connected to one cell."""
      <<find_adjacent_cells>>

  path = [initial_cell]
  start_cells = find_adjacent_cells(grid, initial_cell)
  cell_to_traverse = random.choice(start_cells)

  previous_cell = initial_cell
  while cell_to_traverse != initial_cell:
      path.append(cell_to_traverse)
      adjacent_cells = find_adjacent_cells(grid, cell_to_traverse)
      temp = cell_to_traverse
      cell_to_traverse = [cell for cell in adjacent_cells
                          if cell != previous_cell][0]
      previous_cell = temp

  return path
#+end_src

For the code below, =find_adjacent_cells=, note that a higher =y= means that it is /lower/ in the grid.

#+name: find_adjacent_cells
#+begin_src python :noweb yes
  y, x = cell[0], cell[1]
  char = grid[y][x]
  match char:
      case "S":
          <<find_adjacent_cells_start>>
      case "|":
          return (y - 1, x), (y + 1, x)
      case "-":
          return (y, x - 1), (y, x + 1)
      case "F":
          return (y + 1, x), (y, x + 1)
      case "7":
          return (y + 1, x), (y, x - 1)
      case "L":
          return (y - 1, x), (y, x + 1)
      case "J":
          return (y - 1, x), (y, x - 1)
#+end_src

Now we only need to find out what cells are adjacent to the start position =S=. The cell has two to four neighbours, two of which are connected to it (otherwise it is no single loop). We can reuse the previous method, =find_adjacent_cells=, for all of the neighbours of =S=. There will be two neighbours which will have =S= as its adjacent cell.

#+name: find_adjacent_cells_start
#+begin_src python
  possible_neighbours = {
      (y + 1, x) if y < len(grid) else (y - 1, x),
      (y - 1, x) if y > 0 else (y + 1, x),
      (y, x + 1) if x < len(grid[0]) else (y, x - 1),
      (y, x - 1) if x > 0 else (y, x + 1),
  }

  neighbours = list()
  for neighbour in possible_neighbours:
      cells = find_adjacent_cells(grid, neighbour)
      if cells is not None and (y, x) in cells:
          neighbours.append(neighbour)

  assert len(neighbours) == 2, f"{len(possible_neighbours)} should be equal to 2"
  return neighbours
#+end_src

#+CALL: day_10_part_one(inputfile="inputs/day10.txt")

#+RESULTS:
: 6613

** Part Two

*** Problem
We need to find out how many tiles are enclosed by the loop. Look at the following input:
#+begin_example
...........
.S-------7.
.|F-----7|.
.||OOOOO||.
.||OOOOO||.
.|L-7OF-J|.
.|II|O|II|.
.L--JOL--J.
.....O.....
#+end_example

The "O"s represent being outside the loop, and the "I" represent being inside. Even more impressive, the following example has the same amount (4) of tiles inside the loop. With the next example, you can see that squeezing between two pipes is also allowed.

#+begin_example
..........
.S------7.
.|F----7|.
.||OOOO||.
.||OOOO||.
.|L-7F-J|.
.|II||II|.
.L--JL--J.
..........
#+end_example

*** Solution
Leo already told me a great way to solve this, and I'm going to do that. The idea is to count the number of pipes with a horizontal exit that you've already seen (so, that are to the left of your position). If that number is odd, you are "inside" the loop. If it's even, you are outside. See the [[https://en.wikipedia.org/wiki/Even%E2%80%93odd_rule][Even-odd rule]].

We are cheating a bit, since we know from our input that =S= has a horizontal exit. the proper way to solve this is quite easy since we already know the path (check if the cell above =S= is in the path), but this is easier :)

#+NAME: day_10_part_two
#+begin_src python :noweb yes :tangle tangle/d10p2.py :var inputfile="inputs/day10-ex2.txt" :results output
  with open(inputfile) as f:
      grid = f.read().strip().split('\n')

  def find_start_location(grid):
      <<find_start_location>>


  def traverse_path(grid, cell):
      """Returns the length of the path traversed by starting from cell in grid."""
      <<traverse_path>>


  S = find_start_location(grid)
  path = traverse_path(grid, S)

  counter = 0
  for i, row in enumerate(grid):
      pipe_count = 0
      for j, char in enumerate(row):
          if (i, j) in path and char in ['|', 'J', 'L', 'S']:
              pipe_count += 1
          elif pipe_count % 2 == 1 and (i, j) not in path:
              counter += 1

  print(counter)
#+end_src

#+RESULTS: day_10_part_two
: 10

#+CALL: day_10_part_two(inputfile="inputs/day10.txt")

#+RESULTS:
: 511

* Day 11
** Part One
*** Problem
We have an input of the following format:

#+name: example_input
#+begin_example
...#......
.......#..
#.........
..........
......#...
.#........
.........#
..........
.......#..
#...#.....
#+end_example

which represents an image from a telescope. Each =.= represents an empty space, and each =#= represents a galaxy. The goal is to find the shortest distance between /each pair/ of galaxies.

The catch is that since the image was taken, the space has expanded. Area with a lot of mass expands less, so all /rows and columns/ which have /no galaxies/ expand to be twice as large. After expansion (rows 4 and 8, and columns 3, 6 and 9 have no galaxies), the universe now looks like this:

#+name: example_expanded
#+begin_example
....#........
.........#...
#............
.............
.............
........#....
.#...........
............#
.............
.............
.........#...
#....#.......
#+end_example

The goal is to calculate the distance of the shortest path between /each pair/ of galaxies, and sum them up. According to the rules the path can move over galaxies, so we can just take the Manhattan distance, which is nice.

*** Solution
The solution consists of two steps: expanding the image, and calculating the shortest paths.

#+name: day_11_part_one
#+begin_src python :noweb yes :tangle tangle/d11p1.py :var inputfile="inputs/day11-ex.txt" :results output
  def get_expansion(inputfile):
      <<expansion_one>>

  expansion = get_expansion(inputfile)

  def sum_distance(expansion):
      <<sum_distance_one>>

  print(sum_distance(expansion))
#+end_src

#+RESULTS: day_11_part_one
: 374

**** Expansion
The empty rows and columns have to be duplicated. First, find out what they are. The rows are easy, and the columns are as well after a short transpose. [[https://docs.python.org/3.8/library/functions.html#zip][zip]] returns iterables of zipped rows, where each iterable has the elements of a column. To get each column as a string, we can just do =''.join(col)=.

#+name: expansion_one
#+begin_src python :results none
  with open(inputfile) as f:
      puzzle = f.read().strip()
  rows = puzzle.split('\n')

  empty_rows = [index for index, row in enumerate(rows) if not '#' in row]
  empty_row = ".".join(['' for i in range(len(rows[0]) + 1)])
  for i in empty_rows[::-1]:
      rows.insert(i, empty_row)

  cols = [''.join(col) for col in zip(*rows)]
  empty_cols = [index for index, col in enumerate(cols) if not '#' in col]
  empty_col = ".".join(['' for i in range(len(cols[0]) + 1)])
  for i in empty_cols[::-1]:
      cols.insert(i, empty_col)


  rows = [''.join(row) for row in zip(*cols)]
  return '\n'.join(rows)
#+end_src

**** Calculating shortest path
OK now we need to calculate the shortest paths of all pairs of galaxies. For calculating the Manhattan distance, we need the coordinates of all galaxies. Then, we need to iterate over all /pairs of galaxies/ ([[https://docs.python.org/3/library/itertools.html#itertools.combinations][itertools.combinations]]) and calculate the distance for each pair. Finally, we sum that up.
#+name: sum_distance_one
#+begin_src python :results none
  from itertools import combinations

  galaxies = list()
  for y, row in enumerate(expansion.split('\n')):
      for x, char in enumerate(row):
          if char == '#':
              galaxies.append((x, y))

  pairs = list(combinations(galaxies, r=2))

  total = 0
  for p1, p2 in pairs:
      total += abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])

  return total
#+end_src

#+NAME: day_11_part_one_main
#+CALL: day_11_part_one(inputfile="inputs/day11.txt")

#+RESULTS: day_11_part_one_main
: 9974721

** Part Two
This problem is identical, except that now the galaxies have moved /much farther/ away from each other. Whereas before we had to duplicate the rows and cols (ie, add /one/ row for each empty row), now we have to add 1.000.000 empty rows for each empty row (and col).

The naive way to do this is to simply convert each empty row to 1.000.000 empty rows and calculate the distance in the expanded image. However, we don't need this and is horribly inefficient. Instead, we save the empty rows and columns (by index, f.e. =[2, 5, 8]=), and when calculating the distance, we check how many empty rows and columns the galaxies have between them. For each one of them, we add 1.000.000 to the sum of distances.

This solution generalises the previous one (=expansionfactor= of =2=).

#+NAME: day_11_part_two
#+begin_src python :noweb yes :tangle tangle/d11p2.py :var inputfile="inputs/day11-ex.txt" :var expansionfactor=2 :results output
  with open(inputfile) as f:
      puzzle = f.read().strip()

  def get_empty_rows_cols(puzzle):
      <<empty_rows_cols>>

  empty_rows, empty_cols = get_empty_rows_cols(puzzle)

  def sum_distance(puzzle, empty_rows, empty_cols, expansionfactor):
      <<new_sum_distance>>

  print(sum_distance(puzzle, empty_rows, empty_cols, expansionfactor))
#+end_src

#+RESULTS:
: 374

We can copy the finding of =empty_rows / empty_cols= from Part One:

#+name: empty_rows_cols
#+begin_src python :results none
  rows = puzzle.split('\n')
  empty_rows = [index for index, row in enumerate(rows) if not '#' in row]

  cols = [''.join(col) for col in zip(*rows)]
  empty_cols = [index for index, col in enumerate(cols) if not '#' in col]

  return empty_rows, empty_cols
#+end_src

Now that we have the empty rows and columns, let's modify our calculation part so that we count the expanded rows and columns. I am going to use [[https://docs.python.org/3/library/bisect.html][bisect]] for this since it's fast.

The way I do this is to look at each pair, f.e. =((5,0), (7,1))=. For each pair determine =x_min= and =x_max=, in the example =5= and =7=. The highest index of an empty row can be found by doing =bisect_right(empty_rows, x_max)=. The lowest index of an empty row can be found by doing =bisect_left(empty_rows, x_min)=. Having these indices is great, since the /amount/ of empty rows is simply =highest_index - lowest_index=, or in the code below, =last_empty_row - first_empty_row=. Analogous to columns, and you have the amount of empty rows and columns between the pair of galaxies, which you can multiply by =expansionfactor - 1= to get the effect of converting =1= empty row/column to =expansionfactor= empty rows/columns.

#+name: new_sum_distance
#+begin_src python :results none
  from itertools import combinations
  import bisect

  galaxies = list()
  for x, row in enumerate(puzzle.split('\n')):
      for y, char in enumerate(row):
          if char == '#':
              galaxies.append((x, y))

  pairs = list(combinations(galaxies, r=2))

  total = 0
  for p1, p2 in pairs:
      x_min, x_max = min(p1[0], p2[0]), max(p1[0], p2[0])
      first_empty_row = bisect.bisect_left(empty_rows, x_min)
      last_empty_row = bisect.bisect_right(empty_rows, x_max)
      empty_rows_between = last_empty_row - first_empty_row
      x = x_max - x_min + empty_rows_between * (expansionfactor - 1)

      y_min, y_max = min(p1[1], p2[1]), max(p1[1], p2[1])
      first_empty_col = bisect.bisect_left(empty_cols, y_min)
      last_empty_col = bisect.bisect_right(empty_cols, y_max)
      empty_cols_between = last_empty_col - first_empty_col
      y = y_max - y_min + empty_cols_between * (expansionfactor - 1)

      total += x + y

  return total
#+end_src

#+NAME: day_11_part_two_main
#+CALL: day_11_part_two(inputfile="inputs/day11.txt", expansionfactor=1000000)

#+RESULTS: day_11_part_two_main
: 702770569197

* Day 12
:PROPERTIES:
:header-args: :results output :var inputfile="inputs/day12-ex.txt"
:END:

** Part One

*** Problem
We have a list of rows, with the following structure.

#+begin_example
???.### 1,1,3
.??..??...?##. 1,1,3
?#?#?#?#?#?#?#? 1,3,1,6
????.#...#... 4,1,1
????.######..#####. 1,6,5
?###???????? 3,2,1
#+end_example

After the space, we have a comma-separated list of groups. Each group must be an contiguous group of =#= characters, separated by =.= chars. The =?= represent an unknown character that could be either =#= or =.=. The goal is to find the amount of arrangements that exist per row which are all valid according to the list of groups.

*** Solution

#+name: d12p1
#+begin_src python :noweb yes :tangle tangle/d12p1.py :var inputfile="inputs/day12.txt"
  def convert_row(line):
      """Function that converts an input line to a row and a list of groups."""
      <<convert_row>>

  with open(inputfile) as f:
      rows = [convert_row(line) for line in f]

  def count_possibilities(row, groups):
      <<count_possibilities>>

  possibilities = (count_possibilities(r, g) for r, g in rows)
  print(sum(possibilities))
#+end_src

#+RESULTS: d12p1
: 6871

Recursion! =count_possibilities= takes a row and an ordered list of groups. We look at the first character in the row, return =0= if know we cannot satisfy the groups, and =1= if we have satisfied it. If we do not know, we modify =groups=, remove some characters from =row=, and call =count_possibilities= with the smaller =row= and =groups=.

If the first character is a =#=, we know we must have entered the first group. So, we must have =#= or =?= characters until the first group is saturated. If this cannot be done, the current row cannot be matched to the given groups, so we return =0=. If we encounter a =.=, we remove it. Easy peasy. If we encounter a =?=, we try both options and sum the amount of possibilities.

#+name: count_possibilities
#+begin_src python :results none
  if len(groups) == 0 and '#' not in row:
      return 1

  if len(row) == 0 or len(groups) == 0:
      return 0

  first = row[0]
  if first == '.':
      return count_possibilities(row[1:], groups)

  if first == '?':
      one = count_possibilities('#' + row[1:], groups)
      two = count_possibilities(row[1:], groups)
      return one + two

  if first == '#':
      i = 1
      try:
          while ((i < len(row) and row[i] == '#') or
                 (i < groups[0] and row[i] in ['?', '#'])):
              i += 1
      except IndexError:
          return 0

      if not i == groups[0]:
          return 0

      return count_possibilities(row[i + 1:], groups[1:])
#+end_src

Note that =count_possibilities= requires =row= to be just the list of characters =#=, =.= and =?=, and =groups= should be a list of integers. Let's re-use the variable =rows=.

#+name: convert_row
#+begin_src python :results none
  r, g = line.split(' ')
  g = tuple(int(x) for x in g.split(','))
  return r, g
#+end_src

** Part Two
This is just a change in the input first. But, let's [[https://docs.python.org/3/library/functools.html#functools.cache][cache]]!

#+begin_src python :noweb yes :tangle tangle/d12p2-new.py :var inputfile="inputs/day12.txt"
  from functools import cache

  def convert_row(line):
      <<convert_row>>

  with open(inputfile) as f:
      rows = [convert_row(line) for line in f]

  new_rows = list()
  for row, groups in rows:
      new_row = (row + '?') * 5
      new_row = new_row[:-1]
      new_groups = groups * 5
      new_rows.append((new_row, new_groups))

  @cache
  def count_possibilities(row, groups):
      <<count_possibilities>>

  possibilities = [count_possibilities(r, g) for r, g in new_rows]
  print(sum(possibilities))
#+end_src

#+RESULTS:
: 2043098029844

* Day 13
** Part One
*** Problem

We are in a landscape of ash =.=, rocks =#= and mirrors. Given the following example input:
#+begin_example
#.##..##.
..#.##.#.
##......#
##......#
..#.##.#.
..##..##.
#.#.##.#.

#...##..#
#....#..#
..##..###
#####.##.
#####.##.
..##..###
#....#..#
#+end_example

we need to find out where the mirrors are. The first pattern above has a mirror between column 5 and 6, since columns 5/6, 4/7, 3/8 and 2/9 are perfectly mirrored. The second example pattern has a horizontal mirror between rows 4 and 5.

The goal is to add up the *number of columns* to the /left/ of each vertical mirror, with *100 * number of rows* /above/ each horizontal mirror. The above example has 5 columns to the left, and 4 rows above a mirror, and has a total of *405*.

*** Solution
:PROPERTIES:
:header-args: :results output :var inputfile="inputs/day13-ex.txt" :noweb yes
:END:
The first idea is to save a list of indices of rows/columns that are equal. For example, when iterating over the first example, we could see that col =2 == 9=, =3 == 8=, =4 == 7=, and =5 == 6=. Since each of these pairs sum up to the same number (=11=), and there is no other valid combination that sums up to =11=, we know that there must be a mirror at =11 / 2 = 5.5=, or between columns =5= and =6=.

The meat of the function is this:

#+begin_src python :tangle tangle/d13p1.py :var inputfile="inputs/day13.txt"
  <<load_patterns>>

  <<helper_functions>>

  def find_value(pattern, multiplier):
      duplicate_rows = find_duplicate_rows(pattern)
      mirror = find_mirror(pattern, duplicate_rows)
      if mirror:
          return multiplier * (int(mirror) + 1)
          print(total)
      else:
          return 0

  total = 0
  for pattern in patterns:
      total += find_value(pattern, multiplier=100)
      pattern = transpose(pattern)
      total += find_value(pattern, multiplier=1)

  print(total)
#+end_src

#+RESULTS:
: 34911

**** Helper functions
Above, we call =find_duplicate_rows=, which takes in a pattern and returns a list of /pairs of indices/. =find_mirror= takes such a list, and returns the mirror that exists in this pattern (=None= otherwise). Finally, =transpose= simply tranpsoses the image, so we can reuse the function =find_duplicate_rows=.

[[https://www.youtube.com/watch?v=lyDLAutA88s][David Beazley]] showed me the power of [[https://docs.python.org/3/library/collections.html#collections.defaultdict][defaultdict]], so I think that I might use that. For each row, I could save a list of indices that actually are these rows.

#+name: helper_functions
#+begin_src python
  from itertools import combinations
  from collections import defaultdict

  def find_duplicate_rows(pattern):
      rows = defaultdict(list)
      for i, row in enumerate(pattern):
          rows[row].append(i)

      equal_rows = [rows[row] for row in rows if len(rows[row]) >= 2]
      too_long = [equals for equals in equal_rows if len(equals) > 2]
      for indices in too_long:
          equal_rows.extend(map(list, combinations(indices, r=2)))
          del equal_rows[equal_rows.index(indices)]
      return sorted(equal_rows)


  def find_mirror(pattern, duplicate_indices):
      possible_mirrors = set()
      for i1, i2 in duplicate_indices:
          possible_mirrors.add(i1 + i2)

      for mirror in possible_mirrors:
          correct_duplicate_rows = [[x, mirror - x]
                                    for x in range(0, int(mirror / 2) + 1)
                                    if mirror - x < len(pattern)]
          relevant_duplicates = [x for x in duplicate_indices
                                 if sum(x) == mirror]
          if correct_duplicate_rows == relevant_duplicates:
              return mirror / 2

  def transpose(pattern):
      pattern = [''.join(col) for col in zip(*pattern)]
      return pattern
#+end_src

#+RESULTS: helper_functions

#+RESULTS:

**** Load patterns
#+name: load_patterns
#+begin_src python
  with open(inputfile) as f:
      lines = ''.join(f.readlines()).strip()
      patterns = [pattern.split('\n') for pattern in lines.split('\n\n')]
#+end_src

#+RESULTS: load_patterns
