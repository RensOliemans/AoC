#+title: Advent of Code
#+author: Rens Oliemans
#+date: 2023-12-11

Ik ben op [2023-12-11 ma] gestart, en ga niet de eerdere challenges doen: ik begin gewoon met die van vandaag, oftewel Dag 11.
* Day 11
** Part One
*** Problem
We have an input of the following format:

#+name: example_input
#+begin_example
...#......
.......#..
#.........
..........
......#...
.#........
.........#
..........
.......#..
#...#.....
#+end_example

which represents an image from a telescope. Each =.= represents an empty space, and each =#= represents a galaxy. The goal is to find the shortest distance between /each pair/ of galaxies.

The catch is that since the image was taken, the space has expanded. Area with a lot of mass expands less, so all /rows and columns/ which have /no galaxies/ expand to be twice as large. After expansion (rows 4 and 8, and columns 3, 6 and 9 have no galaxies), the universe now looks like this:

#+name: example_expanded
#+begin_example
....#........
.........#...
#............
.............
.............
........#....
.#...........
............#
.............
.............
.........#...
#....#.......
#+end_example

The goal is to calculate the distance of the shortest path between /each pair/ of galaxies, and sum them up. According to the rules the path can move over galaxies, so we can just take the Manhattan distance, which is nice.

*** Solution
The solution consists of two steps: expanding the image, and calculating the shortest paths.

#+name: part_one
#+begin_src python :noweb yes :tangle d11p1.py :var inputfile="inputs/day11-ex.txt"
  def get_expansion(inputfile):
      <<expansion_one>>

  expansion = get_expansion(inputfile)

  def sum_distance(expansion):
      <<sum_distance_one>>

  return sum_distance(expansion)
#+end_src

#+RESULTS: part_one
: 374

**** Expansion
The empty rows and columns have to be duplicated. First, find out what they are. The rows are easy, and the columns are as well after a short transpose. [[https://docs.python.org/3.8/library/functions.html#zip][zip]] returns iterables of zipped rows, where each iterable has the elements of a column. To get each column as a string, we can just do =''.join(col)=.

#+name: expansion_one
#+begin_src python :results none
  with open(inputfile) as f:
      puzzle = f.read().strip()
  rows = puzzle.split('\n')

  empty_rows = [index for index, row in enumerate(rows) if not '#' in row]
  empty_row = ".".join(['' for i in range(len(rows[0]) + 1)])
  for i in empty_rows[::-1]:
      rows.insert(i, empty_row)

  cols = [''.join(col) for col in zip(*rows)]
  empty_cols = [index for index, col in enumerate(cols) if not '#' in col]
  empty_col = ".".join(['' for i in range(len(cols[0]) + 1)])
  for i in empty_cols[::-1]:
      cols.insert(i, empty_col)


  rows = [''.join(row) for row in zip(*cols)]
  return '\n'.join(rows)
#+end_src

**** Calculating shortest path
OK now we need to calculate the shortest paths of all pairs of galaxies. For calculating the Manhattan distance, we need the coordinates of all galaxies. Then, we need to iterate over all /pairs of galaxies/ ([[https://docs.python.org/3/library/itertools.html#itertools.combinations][itertools.combinations]]) and calculate the distance for each pair. Finally, we sum that up.
#+name: sum_distance_one
#+begin_src python
  from itertools import combinations

  galaxies = list()
  for y, row in enumerate(expansion.split('\n')):
      for x, char in enumerate(row):
          if char == '#':
              galaxies.append((x, y))

  pairs = list(combinations(galaxies, r=2))

  total = for p1, p2 in pairs:
      total += abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])

  return total
#+end_src

#+RESULTS: sum_distance

*** Running on main input

#+NAME: part_one_main
#+CALL: part_one(inputfile="inputs/day11.txt")

#+RESULTS: part_one_main
: 9974721

** Part Two
This problem is identical, except that now the galaxies have moved /much farther/ away from each other. Whereas before we had to duplicate the rows and cols (ie, add /one/ row for each empty row), now we have to add 1.000.000 empty rows for each empty row (and col).

The naive way to do this is to simply convert each empty row to 1.000.000 empty rows and calculate the distance in the expanded image. However, we don't need this and is horribly inefficient. Instead, we save the empty rows and columns (by index, f.e. =[2, 5, 8]=), and when calculating the distance, we check how many empty rows and columns the galaxies have between them. For each one of them, we add 1.000.000 to the sum of distances.

This solution generalises the previous one (=expansionfactor= of =2=).

#+NAME: part_two
#+begin_src python :noweb yes :tangle d11p2.py :var inputfile="inputs/day11-ex.txt" :var expansionfactor=2
  with open(inputfile) as f:
      puzzle = f.read().strip()

  def get_empty_rows_cols(puzzle):
      <<empty_rows_cols>>

  empty_rows, empty_cols = get_empty_rows_cols(puzzle)

  def sum_distance(puzzle, empty_rows, empty_cols, expansionfactor):
      <<new_sum_distance>>

  return sum_distance(puzzle, empty_rows, empty_cols, expansionfactor)
#+end_src

#+RESULTS:
: 374

We can copy the finding of =empty_rows / empty_cols= from Part One:

#+name: empty_rows_cols
#+begin_src python :results none
  rows = puzzle.split('\n')
  empty_rows = [index for index, row in enumerate(rows) if not '#' in row]

  cols = [''.join(col) for col in zip(*rows)]
  empty_cols = [index for index, col in enumerate(cols) if not '#' in col]

  return empty_rows, empty_cols
#+end_src

Now that we have the empty rows and columns, let's modify our calculation part so that we count the expanded rows and columns. I am going to use [[https://docs.python.org/3/library/bisect.html][bisect]] for this since it's fast.

The way I do this is to look at each pair, f.e. =((5,0), (7,1))=. For each pair determine =x_min= and =x_max=, in the example =5= and =7=. The highest index of an empty row can be found by doing =bisect_right(empty_rows, x_max)=. The lowest index of an empty row can be found by doing =bisect_left(empty_rows, x_min)=. Having these indices is great, since the /amount/ of empty rows is simply =highest_index - lowest_index=, or in the code below, =last_empty_row - first_empty_row=. Analogous to columns, and you have the amount of empty rows and columns between the pair of galaxies, which you can multiply by =expansionfactor - 1= to get the effect of converting =1= empty row/column to =expansionfactor= empty rows/columns. 

#+name: new_sum_distance
#+begin_src python :results none
  from itertools import combinations
  import bisect

  galaxies = list()
  for x, row in enumerate(puzzle.split('\n')):
      for y, char in enumerate(row):
          if char == '#':
              galaxies.append((x, y))

  pairs = list(combinations(galaxies, r=2))

  total = 0
  for p1, p2 in pairs:
      x_min, x_max = min(p1[0], p2[0]), max(p1[0], p2[0])
      first_empty_row = bisect.bisect_left(empty_rows, x_min)
      last_empty_row = bisect.bisect_right(empty_rows, x_max)
      empty_rows_between = last_empty_row - first_empty_row
      x = x_max - x_min + empty_rows_between * (expansionfactor - 1)

      y_min, y_max = min(p1[1], p2[1]), max(p1[1], p2[1])
      first_empty_col = bisect.bisect_left(empty_cols, y_min)
      last_empty_col = bisect.bisect_right(empty_cols, y_max)
      empty_cols_between = last_empty_col - first_empty_col
      y = y_max - y_min + empty_cols_between * (expansionfactor - 1)

      total += x + y

  return total
#+end_src

*** Running on main input

#+NAME: part_two_main
#+CALL: part_two(inputfile="inputs/day11.txt", expansionfactor=1000000)

#+RESULTS: part_two_main
: 702770569197
