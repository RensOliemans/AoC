#+TITLE: Advent of Code 2024
#+SUBTITLE: Literate Clojure solutions to programming puzzles.
#+AUTHOR: Rens Oliemans
#+DESCRIPTION: My Advent of Code solutions for 2024
#+LATEX_CLASS_OPTIONS: [a4paper,11pt]

Finding the Chief Historian! This program contains my [[https://adventofcode.com/][Advent of Code]] solutions for 2024, which you can find on my [[https://sr.ht/~rensoliemans/AoC/][sourcehut]] and [[https://github.com/RensOliemans/AoC/][GitHub]]. I believe GitHub doesn't show the results of code blocks, which means that viewing it there might leave you a bit confused.

In general, I've added line numbers to code blocks when that code block is part of the solution file. In some cases, I've added some code that explains, clarifies, justifies or otherifies something. Those lines aren't numbered if they aren't necessary to the final solution.
#+LATEX: \clearpage

* Utils
:PROPERTIES:
:header-args: :tangle util.clj
:header-args:clojure: :session *clojure-util* :results silent
:UNNUMBERED: t
:END:

I define some common functions in =aoc.util=, mostly related to parsing the input. The input always comes in a file but also usually has an example input. The former is a file (which we read as a string with =slurp=) and the latter is just a string in the same format. Therefore it's easiest to let the days itself take care of reading the file (since they also have the example input), and just operate on strings here.

#+begin_src clojure -n -r
  (ns aoc.util
    (:require [clojure.string :as str]))
#+end_src

#+begin_src clojure +n 1
  (defn string-as-lines
    "Outputs the string as a vector, one element per line."
    [input]
    (str/split input #"\n"))
#+end_src

Often the lines contain numbers:
#+begin_src clojure +n 1
  (defn string-as-numbers-per-line
    "Assumes there is a number on each line: we parse it and return a
    vector, one element per line. Technically each number is parsed with
    `read-string`, so it isn't just limited to numbers, but I've only
    tested numbers."
    [input]
    (let [lines (string-as-lines input)]
      (map read-string lines)))
#+end_src

or lists of numbers. This was the case in both [[*Day 1][Day 1]] and [[*Day 2][Day 2]], where the input had the following format:
#+NAME: util-testtable
#+begin_example
7 6 4 2 1
1 2 7 8 9
9 7 6 2 1
1 3 2 4 5
8 6 4 4 1
1 3 6 7 9
#+end_example
Here, we want the whole file to be represented by a vector, where each element is itself a vector of the space-separated numbers on a line.
#+NAME: num-list-per-line
#+begin_src clojure +n 1
  (defn num-list-per-line
    "Returns a vector of vectors, the outer vector has an element per
    line, the inner has space-separated elements. "
    [input]
    (let [lines (string-as-lines input)]
      (->> lines
           (map #(str/split % #"\s+"))
           (map #(map read-string %)))))
#+end_src

This function, run on the example table seen above, will return the following:
#+header: :var example=util-testtable
#+begin_src clojure :results verbatim :tangle no :exports both
  (num-list-per-line example)
#+end_src

#+RESULTS:
: ((7 6 4 2 1) (1 2 7 8 9) (9 7 6 2 1) (1 3 2 4 5) (8 6 4 4 1) (1 3 6 7 9))

#+LATEX: \clearpage

* Day 1
:PROPERTIES:
:header-args: :tangle src/day1.clj :exports both :results pp
:header-args:clojure: :session *clojure-1* :var testinput=testinput1
:END:

** Part 1
We need to reconcile two lists. We get them in the following form:

#+NAME: testinput1
#+begin_example
3   4
4   3
2   5
1   3
3   9
3   3
#+end_example
And our goal is to find the "distance" between the two lists.
#+begin_quote
To find the total distance between the left list and the right list, add up the distances between all of the [sorted] pairs you found.
#+end_quote
For the example above, the correct answer is *11*.

My strategy is: convert the input to pairs of numbers ([[num-list-per-line][=aoc.util/num-list-per-line=]] takes care of this), transpose them (so we have two lists), sort them, transpose them again (pairs), and take the difference and sum it.
Makes sense? We need the two tiny helper functions =sum= and =transpose=:
#+begin_src clojure -n -r :results silent
  (ns aoc.1)
#+end_src

#+begin_src clojure +n 1 :results silent
  (defn sum "Finds the sum of a vector of numbers" [vec]
    (reduce + vec))

  (defn transpose "Transposes a matrix" [m]
    (apply mapv vector m))
  (defn p1 [input]
    (let [input (aoc.util/num-list-per-line input)]
      (->> input
           (transpose)
           (map sort)
           (transpose)
           (map #(abs (- (first %) (second %))))
           (sum))))
#+end_src

It works for the testinput, fantastic. Now let's open the file and run it on the input.
The input file for day 1 can be found in the file =inputs/1=.

#+begin_src clojure +n 1 :results pp :cache yes
  (assert (= 11 (p1 testinput)))
  (def input (slurp "inputs/1"))
  (p1 input)
#+end_src

#+RESULTS[bddfa84f4ff6c82eb9ed6fdf2024ebfa53ff63ea]:
: 2057374
: 

Hurrah! We get a *Gold Star*!

** Part 2
Now, we need to find a "similarity score" for the two lists:
#+begin_quote
Calculate a total similarity score by adding up each number in the left list after multiplying it by the number of times that number appears in the right list.
#+end_quote

A naive way to do this would be to iterate over the first list, where, for each element, we count how many items in the second list are equal to that element, and multiply the element with the count.
However, you'd be doing a lot of duplicate counting.
A faster way to do it is to convert the second (it doesn't really matter which one you pick) list to a map once, with ={element frequency}=.
Let's use the function =frequencies=!

#+begin_src clojure :tangle no :results verbatim
  (frequencies (last (transpose (aoc.util/num-list-per-line testinput))))
#+end_src

#+RESULTS:
: {4 1, 3 3, 5 1, 9 1}
: 

Now, we can iterate over the first list (which we get by ~(transpose (numbers input))~), multiply the element itself by the count in =frequencies=, and sum the result.

#+begin_src clojure +n 1 :cache yes
  (defn p2 [input]
    (let [input (transpose (aoc.util/num-list-per-line input))
          one (first input)
          freqs (frequencies (second input))]
      (->> one
           (map #(* % (freqs % 0)))
           (sum))))

  (assert (= 31 (p2 testinput)))
  (p2 input)
#+end_src

#+RESULTS[3352887d7d180d87b1dc656c9410e33f9467491e]:
: 23177084
: 

#+LATEX: \clearpage

* Day 2
:PROPERTIES:
:header-args: :tangle src/day2.clj :exports both :var testinput=testinput2 :results pp
:header-args:clojure: :session *clojure-2*
:END:

** Part 1
Analysing some unusual data from a nuclear reactor. The data consists of /reports/ separated by lines, each of which is a list of numbers (/levels/), separated by spaces.

#+NAME: testinput2
#+begin_example
7 6 4 2 1
1 2 7 8 9
9 7 6 2 1
1 3 2 4 5
8 6 4 4 1
1 3 6 7 9
#+end_example

We need to find out how many reports are *safe*, which is the case if all levels are gradually increasing or decreasing. This is defined as such:
#+begin_quote
[A] report only counts as safe if both of the following are true:

 - The levels are either all increasing or all decreasing.
 - Any two adjacent levels differ by at least one and at most three.
#+end_quote
In the example input, there are *2* safe reportsâ€”the first and last.

Let's convert all numbers to the difference between the previous number.
Then, a report is safe is all numbers are of the same sign, and the absolute of the number is between 1 and 3.

Since we're computing the difference between each element and the element before, I want to use =partition=, which does exactly this. Then, we can use =mapv= to compute the difference. For the last element of the testinput:
#+begin_src clojure -n -r :results silent
  (ns aoc.2)
#+end_src

#+begin_src clojure +n 1 :results silent
  (defn diffs [record]
    (->> record
         (partition 2 1)
         (mapv (fn [[a b]] (- b a)))))
#+end_src
test it out:
#+begin_src clojure :results verbatim
  (diffs (last (aoc.util/num-list-per-line testinput)))
#+end_src

#+RESULTS:
: [2 3 1 2]
: 

Now just use that to determine whether a record is safe. Recall that the testinput had *2* safe records.
#+begin_src clojure +n 1
  (defn is-safe? [record]
    (let [differences (diffs record)]
      (and (every? #(<= 1 (abs %) 3) differences)
           (apply = (map pos? differences)))))

  (defn p1 [input]
    (->> (aoc.util/num-list-per-line input)
         (filter is-safe?)
         (count)))

  (p1 testinput)
#+end_src

#+RESULTS:
: 2
: 

#+begin_src clojure +n 1 :cache yes
  (def input (slurp "inputs/2"))
  (p1 input)
#+end_src

#+RESULTS[c04baf284769654869f544f68196e3a886f3be94]:
: 242
: 

** Part 2
#+begin_quote
Now, the same rules apply as before, except if removing a single level from an unsafe report would make it safe, the report instead counts as safe.
#+end_quote
First I had a smart idea. Check out [[https://git.sr.ht/~rensoliemans/AoC/commit/e2dcab2f0de76c21477c5e871e029f0282c8fabc][e2dcab2f0de76c21477c5e871e029f0282c8fabc]]. It is much more efficient than the current solution, but much more convoluted and ugly to read. Right now, I just remove each level one by one and check if the record is safe then.

#+begin_src clojure +n 1
  (defn drop-nth [coll n]
    (keep-indexed #(if (not= %1 n) %2) coll))

  (defn dampened-is-safe? [record]
    (some is-safe? (map #(drop-nth record %)
                        (range (count record)))))

  (defn p2 [input]
    (->> (aoc.util/num-list-per-line input)
         (filter dampened-is-safe?)
         (count)))

  (p2 testinput)
#+end_src

#+RESULTS:
: 4
: 

#+begin_src clojure +n 1 :cache yes
  (p2 input)
#+end_src

#+RESULTS[afc0462f73c61ee1266956dcec879f9cad1c2029]:
: 311
: 

*** Benchmark results
The [[https://git.sr.ht/~rensoliemans/AoC/commit/e2dcab2f0de76c21477c5e871e029f0282c8fabc][old solution]] took on average =3.8= milliseconds to execute ~(p2 input)~, and the new solution about =6.0=. This is worth it, IMO, since the code is /much/ simpler. Next time, first do the easy thing, and then benchmark to see if it needs to be improved!
#+LATEX: \clearpage
* Day 3
:PROPERTIES:
:header-args: :tangle src/day3.clj :exports both :results pp
:header-args:clojure: :session *clojure-3*
:END:
** Part 1
We have an input string that contains a lot of characters, for example:
#+begin_example
xmul(2,4)%&mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))
#+end_example

The goal is to extract all substrings that are of the exact form =mul(\d+,\d+)=, and in that case multiply the two numbers together. This is straightforward, I'm not really going to create any helper functions: parse with regex, convert to int, multiply and sum.
#+begin_src clojure -n -r :results silent
  (ns aoc.3)
#+end_src

#+begin_src clojure +n 1 :results silent
  (defn p1 [input]
    (let [matches (re-seq #"mul\((\d+),(\d+)\)" input)]
      (->> matches
           (map #(list (Integer/parseInt (nth % 1)) (Integer/parseInt (nth % 2))))
           (map #(apply * %))
           (reduce +))))
#+end_src

#+begin_src clojure +n 1 :cache yes
  (let [input (slurp "inputs/3")]
    (p1 input))
#+end_src

#+RESULTS[a02b1ddc44c13defbcb1e25c2b97ede252f8e3fb]:
: 155955228
: 

** Part 2
We get a new example string for Part Two:
#+begin_example
xmul(2,4)&mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))
#+end_example

This contains the substrings =don't()= and =do()=, which disable and enable =mul()= instructions. I can do fancy clojure things, but Emacs is way too good for this, so let's do it quickly in Elisp. We want to remove everything from the input file that's in between a =don't()= and a =do()= instruction, and then call =(p1)= on this input.
There are three slightly tricky things about this:
- The input file has some newlines, and in some cases a =do()= instruction is on a later line
  than the previous =don't()= instruction.
- You need to match non-greedy in between a =don't()= and a =do()=.
- If you call =(replace-regexp)= with just the regex and replacement string, it will move
  point to the last match. This is easily fixed by adding the fourth and fifth arguments to
  =replace-regexp=: =START= and =END=.

So, here's some elisp code that does that.
#+begin_src elisp :results none
  (with-temp-buffer
    (insert-file-contents "inputs/3")
    (replace-regexp "\n" "" nil (point-min) (point-max))
    (replace-regexp "don't().+?do()" "" nil (point-min) (point-max))
    (write-region (point-min) (point-max) "inputs/3-enabled"))
#+end_src

And back to clojure for the now trivial second part.
#+begin_src clojure +n 1 :cache yes
  (let [fixed-input (slurp "inputs/3-enabled")]
    (p1 fixed-input))
#+end_src

#+RESULTS[1ba945ef13ca9844840e850811ae2ebd5ba29fd2]:
: 100189366
: 

#+LATEX: \clearpage
* Day 4
:PROPERTIES:
:header-args: :tangle src/day4.clj :exports both :results pp
:header-args:clojure: :session *clojure-4*
:END:

** Part 1
We need to find all instances of =XMAS=, appearing in a text like below, either horizontally, vertically, or diagonally, including written backwards. According to these rules, the example below contains *18* =XMAS=-es.

#+NAME: testinput4
#+begin_example
MMMSXXMASM
MSAMXMSMSA
AMXSXMAAMM
MSAMASMSMX
XMASAMXAMM
XXAMMXXAMA
SMSMSASXSS
SAXAMASAAA
MAMMMXMMMM
MXMXAXMASX
#+end_example

My idea is to search on the letter =X= and use each =X= as a starting point, where we count =XMAS= occurrences in each of the 8 different directions. Let's create a function =count-xmases-at= that counts the number of =XMAS=-es starting from a location. Then simply call that for each =X= found in the grid and sum.

We're going to need to define two helper functions:
- =char-locations= :: Returning all the locations of given character in the grid;
- =is-xmas?= :: A function that takes the =grid=, a =start= coordinate and a =direction=. It
  returns =true= if ="XMAS"= occurs in the =grid= from =start= in the given =direction=.

Since we're working in a grid, let's make =char-locations= return a 2d vector like =[0 0]= to denote the coordinates in the grid. While we're at it, let's define those directions like so:
#+begin_src clojure -n -r :results silent
  (ns aoc.4)
#+end_src

#+begin_src clojure +n 1 :results silent
  (def directions
    [[-1  0]   ; Up
     [ 1  0]   ; Down
     [ 0 -1]   ; Left
     [ 0  1]   ; Right
     [-1 -1]   ; NW
     [-1  1]   ; NR
     [ 1 -1]   ; SW
     [ 1  1]]) ; SE
#+end_src
Which is a nice format to have, because you can then do something like this:
#+begin_src clojure :tangle no :results output
  (defn move [start direction]
    (let [[x y] start
          [x' y'] direction]
      [(+ x x') (+ y y')]))

  (let [start [4 5]
        direction [-1 0]] ;; up
    (move start direction))
#+end_src

#+RESULTS:
: [3 5]
: 

Which is really nice! So, let's define the final functions necessary for Part One:
#+begin_src clojure +n 1 :results silent
  (defn char-locations [grid x]
    (mapcat
     (fn [row string]
       (keep-indexed (fn [col char] (when (= char x) [row col]))
                     string))
     (range)
     grid))

  (defn is-xmas? "Does the grid `grid` contain the string \"XMAS\",
   starting at `start` and going in `direction`?"
    [grid start direction]
    (let [[startx starty] start
          [x' y'] direction]
      (loop [x startx
             y starty
             chars (seq "XMAS")]
        (if (empty? chars)
          true
          (if (not= (get-in grid [x y]) (first chars))
            false
            (recur (+ x x')
                   (+ y y')
                   (rest chars)))))))
#+end_src

Now we can tie everything together. =is-xmas?= returns true if the grid contains the word ="XMAS"= in a given =direction=. After we've found all =X= characters, we can count the amount of =XMAS=-es connected to it by counting all =direction= for which =is-xmas?= returns true.
#+begin_src clojure +n 1 :var example=testinput4 :cache yes
  (defn count-xmases-at [grid start directions]
    (count (filter #(is-xmas? grid start %) directions)))

  (defn p1 [input]
    (let [grid (aoc.util/string-as-lines input)
          xs (char-locations grid \X)]
      (->> xs
           (map #(count-xmases-at grid % directions))
           (reduce +))))

  (assert (= 18 (p1 example)))
  (def input (slurp "inputs/4"))
  (p1 input)
#+end_src

#+RESULTS[c6c29e6af7832c497210844d4425e2348c516c24]:
: 2447
: 

** Part 2
Ah, it seems the Elf thinks we're idiots because they use letters more literally. We don't need to find the string =XMAS=, we need to find the string =MAS= in an X, like so!
#+begin_example
M.S
.A.
M.S
#+end_example

We could have reused the functionality above to search for =MAS=-es, and then only count a =MAS= that has a nice diagonal partner sharing the =A=. However, I found that a bit tricky to reason about, so I've opted to search for all of the =A=-s in the text, and finding =MAS= strings diagonally from that =A=. If there are exactly two =MAS=-es, we know that we got an =X-MAS=.

Instead of =is-xmas?=, we now have =is-mas?=, checking from a =middle= =A= instead of a starting =X=. Note that we're only counting *X*-=MAS=-es, so only use diagonals:
#+begin_src clojure +n 1 :results silent
  (def diagonal-directions
    [[-1 -1]   ; NW
     [-1  1]   ; NE
     [ 1 -1]   ; SW
     [ 1  1]]) ; SE
#+end_src

=is-mas?= is now pretty trivial:
#+begin_src clojure +n 1 :results silent
  (defn is-mas? [grid middle direction]
    (let [[x y] middle
          [x' y'] direction]
      (and (= \M (get-in grid [(+ x x') (+ y y')]))
           (= \S (get-in grid [(- x x') (- y y')])))))
#+end_src

And =count-mases-at= is virtually identical to =count-xmases-at= from Part One.
#+begin_src clojure +n 1 :var example=testinput4 :cache yes
  (defn count-mases-at [grid middle directions]
    (count (filter #(is-mas? grid middle %) directions)))

  (defn p2 [input]
    (let [grid (aoc.util/string-as-lines input)
          as (char-locations grid \A)]
      (->> as
           (map #(count-mases-at grid % diagonal-directions))
           (filter #(= % 2))
           (count))))

  (assert (= 9 (p2 example)))
  (p2 input)
#+end_src

#+RESULTS[be8a03919400d057ad5c63dd70f6d911c7fb69c9]:
: 1868
: 

#+LATEX: \clearpage
* Day 5
:PROPERTIES:
:header-args: :tangle src/day5.clj :exports both :results pp
:header-args:clojure: :session *clojure-5*
:END:

** Part 1
Graphs! We get an input file that looks like this:
#+name: testinput5
#+begin_example
47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
75|47
97|75
47|61
75|61
47|29
75|13
53|13

75,47,61,53,29
97,61,53,29,13
75,29,13
75,97,47,61,53
61,13,29
97,13,75,29,47
#+end_example

The first part contains required orderings, where =29|13= means that =29= should always come before =13=. The second part contains "updates" that might or might not be correctly sorted. In Part One, we need to take the correctly sorted updates, take the middle number, and sum those. I wonder what the second part will be? Actually, I don't wonder, I'm virtually certain of it so I'm just going to sort them already. If the update is equal to the sorted input, it's sorted and we can solve Part One.

I already alluded to graphs, that's because you can think of this as a +DAG+ Directed Graph. In the case before, =29|13= will lead to a vertex from =29= to =13=. My "graph" will basically be a list of dependencies, but I'll call it a graph because that's cool and it sort of is one. Before we get into the weeds, let's zoom out and think of what we need: the sum of the middle numbers of the sorted updates.

First look at the easy functions, leaving =sort= and =build-dependency-graph= empty for the time being:

#+begin_src clojure -n -r :results silent :var example=testinput5
  (ns aoc.5
    (:require [clojure.string :as str]))

  (defn sort [dependency-graph update])
  (defn build-dependency-graph [orderings])

  (defn sorted? [dependency-graph update]
    (= update (sort dependency-graph update)))

  (defn middle-num
    "Finds the middle string in a list of string, and parses it to a
    number. Assumes the length of the list list is odd."
    [update]
    (read-string (nth update (/ (count update) 2))))
#+end_src
Now we can write =p1=. Since I expect to need the orderings, updates and dependency-graph later as well, I'll create a small function =parse-input= that extracts these from the puzzle input.

#+begin_src clojure +n 1 :results silent
  (defn parse-input
    "Parses an input string and returns three useful objects.
    The first obj is a list of orderings, strings of type \"A|B\".
    The second obj is a list of updates, each one a list of strings.
    The third obj is a dependency graph, a map."
    [input]
    (let [[orderings updates] (str/split input #"\n\n")
          orderings (str/split orderings #"\n")
          updates (str/split updates #"\n")
          updates (map #(str/split % #",") updates)
          dependency-graph (build-dependency-graph orderings)]
      [orderings updates dependency-graph]))

  (defn p1 [input]
    (let [[orderings updates dep-graph] (parse-input input)
          sorted? (partial sorted? dep-graph)]
      (->> updates
           (filter sorted?)
           (map middle-num)
           (reduce +))))
#+end_src

Hmm, yes, extremely reasonable, but we haven't yet filled in =build-dependency-graph= and =sort=. =build-dependency-graph= should take as input the =orderings= (a list of strings from the input, separated by =|=), and return a map of the following form:
#+begin_example
{"75" ["97"], "13" ["97" "61" "29" "47" "75" "53"], ...}.
#+end_example

To do so, I'll first create a hash-map of the following form:
#+begin_example
{"75" ["97"], "13" ["97"], "13" ["61"], ...},
#+end_example
and then merge identical keys with [[https://clojuredocs.org/clojure.core/merge-with][=merge-with=]] and [[https://clojuredocs.org/clojure.core/into][=into=]], creating our desired dependency graph.

#+begin_src clojure +n 1 :results silent
  (defn build-dependency-graph
    [orderings]
    (let [order-pairs (->> orderings
                           (map #(str/split % #"\|"))
                           (map #(hash-map (second %), [(first %)])))]
      (apply (partial merge-with into) order-pairs)))
#+end_src

Verifying that this next result is correct is left as an exercise for the reader, but let's test it out on the example input:
#+begin_src clojure :results pp :tangle no :var example=testinput5
  (let [[orderings _ _] (parse-input example)]
    (build-dependency-graph orderings))
#+end_src

#+RESULTS:
: {"61" ["97" "47" "75"],
:  "47" ["97" "75"],
:  "53" ["47" "75" "61" "97"],
:  "13" ["97" "61" "29" "47" "75" "53"],
:  "75" ["97"],
:  "29" ["75" "97" "53" "61" "47"]}
: 

And now, ladies and gentleman, the moment you've all been waiting for, =sort=! We need to sort an =update= based on a =dependency-graph=. You can see it below, but how it works:
1. It creates a =graph=: a subset of =dep-graph=, /limited to the items local to the current/
   =update=. It starts with an empty map ={}=, and then for each =item= in =update=, adds the
   elements in the =dependency-graph= that depend on =item=. =graph= ends up as a map with key
   a number, and value a set of the dependencies.

   Limiting the dependency graph to be local only to the current =update= gives us a
   tremendous advantage: we can sort the items based on the number of dependencies each item
   has.
2. Sort the items in =update= by their amount of dependencies.

#+begin_src clojure +n 1 :results silent
  (defn sort
    "Sort a list of strings based on a dependency map.
     The map defines which elements should come after others."
    [dep-graph update]
    (let [graph (reduce (fn [acc item]
                          (assoc acc item 
                                 (set (get dep-graph item []))))
                        {} update)
          local-deps (fn [deps] (filter #(contains? (set update) %) deps))]
      (vec (sort-by (fn [item]
                      (let [deps (get dep-graph item [])]
                        (count (local-deps deps))))
                    update))))
#+end_src

Now we got everything, ain't we?
#+begin_src clojure +n 1 :var example=testinput5 :cache yes
  (assert (= 143 (p1 example)))
  (def input (slurp "inputs/5"))
  (p1 input)
#+end_src

#+RESULTS[5f41173096fd7f1dfa91fc34a4321cc47a5507e7]:
: 4637
: 

yes
** Part 2
Surprise surprise, we need to sort the incorrect updates! We need to take the sum of the middle numbers of only the /incorrect/ updates. Our prescience is immeasurable.
#+begin_src clojure +n 1 :results silent
  (defn p2 [input]
    (let [[orderings updates deps] (parse-input input)
          is-sorted? (partial sorted? deps)
          sort (partial sort deps)]
      (->> updates
           (filter #(not (is-sorted? %)))
           (map sort)
           (map middle-num)
           (reduce +))))
#+end_src

#+begin_src clojure +n 1 :var example=testinput5 :cache yes
  (assert (= 123 (p2 example)))
  (p2 input)
#+end_src

#+RESULTS[a11abc211e4442a17d741b2c0049e5f8f4629b5c]:
: 6370
: 

#+LATEX: \clearpage
* Day 6
:PROPERTIES:
:header-args: :tangle src/day6.clj :exports both
:header-args:clojure: :session *clojure-6* :results silent
:END:

** Part 1

We get a grid again, now representing a map. It looks like this:
#+name: testinput6
#+begin_example
....#.....
.........#
..........
..#.......
.......#..
..........
.#..^.....
........#.
#.........
......#...
#+end_example

The =^= represents the starting location of our guard, and they start by going /up/. A =#= is an obstacle, and will force the guard to move direction, turning 90Â° clockwise. Our goal is to find out how many distinct places the guard has entered by the time he leaves the puzzle.

If you replace entered places by =X=, you'd get the following output, with *41* distinct places:
#+begin_example
....#.....
....XXXXX#
....X...X.
..#.X...X.
..XXXXX#X.
..X.X.X.X.
.#XXXXXXX.
.XXXXXXX#.
#XXXXXXX..
......#X..
#+end_example

Turning clockwise means that we have only four directions:
#+begin_src clojure -n -r
  (ns aoc.6)
#+end_src

#+begin_src clojure +n 1
  (def directions
    [[-1  0]   ; Up
     [ 0  1]   ; Right
     [ 1  0]   ; Down
     [ 0 -1]]) ; Left
#+end_src

Our function will simply compute the route the guard takes as a vector of coordinates, and count the distinct elements of said vector:
#+begin_src clojure +n 1
  (defn guard-route
    "Takes a `grid` as input returns a vector of 2d coordinates: the route
    of the guard, starting at `start` and turning clockwise at \"#\"
    characters. "
    [grid start])

  (defn p1 [input]
    (let [grid (aoc.util/string-as-lines input)
          start (first (aoc.4/char-locations grid \^))
          route (guard-route grid start)]
      (count (distinct route))))
#+end_src

As for =guard-route=, we loop through the grid, where each iteration of the loop is a move: go to the next location given some direction, or change direction, building a =route= along the way. We replace the =^= character with a =.= after determining the start so that we only have two cases to deal with, =.= and =#=. We can reuse the =char-locations= formula from [[*Day 4][Day 4]] (which gives us a list of coordinates where a certain character can be found) to find our starting location.
#+begin_src clojure +n 1
  (defn replace-char
    [grid [x y] new-char]
    (update grid x
            #(str (subs % 0 y)
                  new-char
                  (subs % (inc y)))))

  (defn guard-route [grid start]
    (let [size (count grid)
          grid (replace-char grid start \.)]
      (loop [location start
             directions (cycle directions)
             route []]
        (let [[x y] location
              [x' y'] (first directions)
              next-location [(+ x x') (+ y y')]
              next-object (get-in grid next-location)
              route (conj route location)]
          (condp = next-object
            nil route
            \. (recur next-location
                      directions
                      route)
            \# (recur location
                      (next directions)
                      route))))))
#+end_src

Perhaps this is a little too imperative, but I'm fine with it.

#+begin_src clojure +n 1 :results pp replace :var example=testinput6 :cache yes
  (assert (= 41 (p1 example)))
  (def input (slurp "inputs/6"))
  (p1 input)
#+end_src

#+RESULTS[0bd2fee5c8bf37beaaa8949231dd6252c760c0a4]:
: 5208
: 

** Part 2
It's of course possible that the guard enters a loop, but fortunately that didn't occur in the input we were given. Part Two is concerned with /creating/ loops by adding obstacles. Specifically, /how many loops can we create by adding just a single obstacle?/

I'm afraid that I'll have to create a very similar function to =guard-route=, except that now we keep track of the places we've been before. If we ever enter the same location while going in the same direction, we know we've entered a loop and can exit immediately. In that case, let's return =true= and name the function =route-has-loop?=. Since we're exiting earlier and I don't want to create cycle-detection, I'm not reusing the function from Part One. In python I'd use a generator, but I haven't figured out =lazy-seq= yet in clojure.

I can't think of a way to do this intelligently, but at least one insight is that you don't have to consider /all/ cases: you only have to add obstacles on parts of the original route; adding them elsewhere will have no effect.

#+begin_src clojure +n 1
  (defn route-has-loop? [grid start])

  (defn p2 [input]
    (let [grid (aoc.util/string-as-lines input)
          start (first (aoc.4/char-locations grid \^))
          route (disj (set (guard-route grid start)) start)]
      (->> route
           (pmap (fn [new-obstacle]
                  (route-has-loop? (replace-char grid new-obstacle \#) start)))
           (filter true?)
           (count))))
#+end_src

=route-has-loop?= is virtually identical to =guard-route=, except that we keep track of the =visited= set (keeping track of visited =[location direction]= pairs), and that we return =true= or =false= instead of the route.

#+begin_src clojure +n 1
  (defn route-has-loop? [grid start]
    (let [size (count grid)
          grid (replace-char grid start \.)]
      (loop [location start
             directions (cycle directions)
             visited #{}]
        (let [[x y] location
              [x' y'] (first directions)
              next-location [(+ x x') (+ y y')]
              next-object (get-in grid next-location)
              pair [next-location [x' y']]]
          (if (contains? visited pair)
            true ;; we have a loop!
            (condp = next-object
              nil false ;; we exited the puzzle
              \. (recur next-location
                        directions
                        (conj visited pair))
              \# (recur location
                        (next directions)
                        (conj visited pair))))))))
#+end_src

On my laptop, this takes about 15 seconds to run on a single thread, but by default uses all of the threads (just by changing =map= into =pmap=, how freaking awesome is that!)

#+begin_src clojure +n 1 :results replace pp :var example=testinput6 :cache yes
  (assert (= 6 (p2 example)))
  (p2 input)
#+end_src

#+RESULTS[0a0ac712951124f841d3db3e8a5f8e909547690b]:
: 1972
:

#+LATEX: \clearpage
* Day 7
:PROPERTIES:
:header-args: :tangle src/day7.clj :exports both
:header-args:clojure: :session *clojure-7* :results silent
:END:

** Part 1
The elephants stole our operators! We had a list of equations, but they stole the operators between the numbers. We get an input where each line represents a single equation, which may be correct. We have to determine whether the equation can be correct, if we limit ourselves to =+= and =*=. In this example:

#+name: testinput7
#+begin_example
190: 10 19
3267: 81 40 27
83: 17 5
156: 15 6
7290: 6 8 6 15
161011: 16 10 13
192: 17 8 14
21037: 9 7 18 13
292: 11 6 16 20
#+end_example
only three of the equations can be made true, and their results sum up to *3749*---that is our goal.

#+begin_src clojure -n -r
  (ns aoc.7 (:require [clojure.string :as str]))
#+end_src

Again we get a familiar pattern: =map=, =filter=, =reduce=.
#+begin_src clojure +n 1
  (defn is-correct? [equation])

  (defn parse-equations [input]
    (let [lines (str/split input #"\n")
          equations (map #(str/split % #": ") lines)]
      (map (fn [[lhs rhs]]
             [(read-string lhs) (vec (map read-string (str/split rhs #" ")))])
           equations)))

  (defn p1 [input]
    (->> input
         (parse-equations)
         (filter is-correct?)
         (map first)
         (reduce +)))
#+end_src

#+begin_src clojure :var example=testinput7 :results replace pp
  (parse-equations example)
#+end_src

#+RESULTS:
#+begin_example
([190 [10 19]]
 [3267 [81 40 27]]
 [83 [17 5]]
 [156 [15 6]]
 [7290 [6 8 6 15]]
 [161011 [16 10 13]]
 [192 [17 8 14]]
 [21037 [9 7 18 13]]
 [292 [11 6 16 20]])

#+end_example

Now the banger =is-correct?=. There are ~800 equations, the longest one has 12 numbers to add or multiply, so 4096 possible operations to check out. I think brute-forcing is pretty viable.

#+begin_src clojure +n 1
  (defn possible-ops
    [x y]
    [(* x y)
     (+ x y)])

  (defn equation-possibilities
    [target nums]
    (->> (range 1 (count nums))
         (reduce (fn [possible-results idx]
                   (->> possible-results
                        (mapcat (fn [result]
                                  (possible-ops result (nth nums idx))))))
                 [(first nums)])))

  (defn is-correct? [equation]
    (let [[result numbers] equation
          targets (equation-possibilities result numbers)]
      (some #(= % result) targets)))
#+end_src

#+begin_src clojure +n 1 :var example=testinput7 :results replace :cache yes
  (assert (= 3749 (p1 example)))
  (def input (slurp "inputs/7"))
  (p1 input)
#+end_src

#+RESULTS[62162dade15973914f0339e7dff088c8b74f7735]:
: 12839601725877

** Part 2
#+begin_src clojure +n 1 :var example=testinput7 :results replace :cache yes
  (defn possible-ops
    [x y]
    [(* x y)
     (+ x y)
     (Long/parseLong (str x y))])

  (assert (= 11387 (p1 example)))
  (p1 input)
#+end_src

#+RESULTS[1af5c02dc79c689bd1447eefcd583d6fbdd59ecb]:
: 149956401519484

#+LATEX: \clearpage
* Day 9
:PROPERTIES:
:header-args: :tangle src/day9.py :exports both
:header-args:python: :session *python-9*
:END:

I'm doing today's in python because I failed at clojure.

A /disk map/ is given like below, and we need to rearrange it to remove the empty spaces, and compute a checksum based on the new arrangement.

#+name: testinput9
#+begin_example
2333133121414131402
#+end_example

The digits alternate between indicating the length of a file, and the length of free space. The final goal is to move the rightmost file blocks to the leftmost empty spaces, until that's no longer possible. It's useful to keep track of the empty spaces and file blocks separately, so we build those two by looping over the file input.

#+begin_src python :results silent
  def parse_puzzle(puzzle):
      files = list()
      freespace = list()
      for i, elem in enumerate(puzzle.strip()):
          if i % 2 == 0:
              files.append([i // 2] * int(elem))
          if i % 2 == 1:
              freespace.append(int(elem))
      freespace.append(0)
      return [list(a) for a in zip(files, freespace)]
#+end_src

** Part 1
We iterate over the input, where for each empty space we find, we move fileblock from the right to the empty space. We keep track of two pointers: where we are at the beginning (where empty spaces might be), and where we are at the end (where we move blocks forward). We do this until the pointers overlap, and the moving logic breaks down into three rules:
- space size == amount of file blocks :: Move file blocks to empty space, move to next empty
  space, remove file blocks from end;
- space size < amount of file blocks :: Move =space= amount of file blocks to empty space,
  move to next empty space, remove =space= amount of file blocks from end;
- space size > amount of file blocks :: Move file blocks to empty space, keep pointer at
  current empty space, decrease empty space size, remove file blocks from end.
#+begin_src python :results silent
  def defragment(puzzle):
      diskmap = parse_puzzle(puzzle)

      result = list()
      j = len(diskmap) - 1
      i = 0
      while i < j:
          group, space = diskmap[i]
          fileblock, _ = diskmap[j]

          result.extend(group)

          if space == len(fileblock):
              result.extend(fileblock)
              i += 1
              j -= 1
          elif space < len(fileblock):
              result.extend([fileblock[0]] * space)
              diskmap[j][0] = fileblock[:len(fileblock) - space]
              i += 1
          elif space > len(fileblock):
              result.extend(fileblock)
              diskmap[i][0] = []
              diskmap[i][1] -= len(fileblock)
              j -= 1

      result.extend(diskmap[j][0])

      return result
#+end_src

Finally, we need to compute a checksum: =block_position * file_id=, where =file_id= is the index of the file blocks before moving them.
#+begin_src python  :var example=testinput9 :results output :cache yes
  def checksum(diskmap):
      result = 0
      for i, elem in enumerate(diskmap):
          elem = 0 if elem == '.' else elem
          result += i * elem
      return result

  def p1(puzzle):
      diskmap = defragment(puzzle)
      return checksum(diskmap)

  with open("inputs/9") as f:
      contents = f.read()

  assert p1(example) == 1928
  print(p1(contents))
#+end_src

#+RESULTS[acbef15f435d35e7b6e60c639945d72cab07ce98]:
: 6283170117911

** Part 2
Part Two is slightly different, and I mistakenly thought I properly understood it twice. You have to move /entire/ file blocks, starting from the end of the diskmap and trying to put each fileblock at the leftmost possible space.
#+begin_src python :var example=testinput9 :results output :cache yes
  def defrag_2(puzzle):
      diskmap = parse_puzzle(puzzle)

      j = len(diskmap) - 1
      while j > 1:
          tomove, innerspace = diskmap[j]
          for i, (group, space) in enumerate(diskmap[:j]):
              if len(tomove) <= space:
                  diskmap[i][1] = 0  # immediately after i
                  diskmap[j-1][1] += len(tomove) + innerspace  # add room where j was
                  del diskmap[j]
                  diskmap.insert(i+1, [tomove, space - len(tomove)])
                  break
          j -= 1

      return flatten_diskmap(diskmap)

  def flatten_diskmap(diskmap):
      result = list()
      for (group, space) in diskmap:
          result.extend(group)
          result.extend(['.'] * space)
      return result

  def p2(puzzle):
      diskmap = defrag_2(puzzle)
      return checksum(diskmap)
  assert p2(example) == 2858
  print(p2(contents))
#+end_src

#+RESULTS[67e1731656ecb211f1232c5ca7f088c258cfee0b]:
: 9813645302006

#+LATEX: \clearpage
